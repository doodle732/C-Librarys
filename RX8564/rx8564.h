/* Generated by CodeDescriptor 1.2.0.0713 */
/*
* Project Name      -> RX8564
* Version           -> 1.0.0.0714
* Author            -> Hm @ Workstadion.: QP-01-02
* Build Date        -> 14.07.2017 07:18:15
* Description       -> Device Driver
*
*
*
*/
#ifndef __RX8564_H__
#define __RX8564_H__

#include <avr/io.h>
#include "i2cmaster.h"

/* Slave Address */
#define RX8564_ADDR 0xA2 

/* RtcSetClkOut Frequency */
#define F_32768Hz 0x80
#define F_1024Hz  0x81
#define F_32Hz	  0x82
#define F_1Hz	  0x83
#define F_STOP	  0x00


/* register addresses */
enum eRtcRegister
{
	eRTC_REG_CTRL1,
	eRTC_REG_CTRL2,
	eRTC_REG_SEC,
	eRTC_REG_MIN,
	eRTC_REG_HOUR,
	eRTC_REG_DAY,
	eRTC_REG_DAY_NAME,
	eRTC_REG_MONTH,
	eRTC_REG_YEAR,
	eRTC_REG_ALERT_MIN,
	eRTC_REG_ALERT_HOUR,
	eRTC_REG_ALERT_DAY,
	eRTC_REG_ALERT_DAY_NAME,
	eRTC_REG_CLKOUT,
	eRTC_REG_TIMER_CTRL,
	eRTC_REG_TIMER,
};

 typedef struct
 {
	 struct  
	 {
		uint8_t	uiSecond;
		uint8_t	uiMinute;
		uint8_t	uiHour;
	 }sTime;
	 
	 struct  
	 {
		 uint8_t	uiMonth;
		 uint8_t	uiDay;
		 uint8_t	uiDayName;
		 uint16_t	uiYear;		 
	 }sDate;

	struct  
	{
		uint8_t	uiMinute;
		uint8_t	uiHour;
		uint8_t	uiDay;
		uint8_t	uiDayName;
	}sAlert;
	
 }sRtc_t;


/* RtcInit
* @para             -> init the rtc
* @return           -> -none
* @description      -> starts all timer
*/
void RtcInit( void );

/* RtcSetTime
* @para             -> hour, minutes, seconds
* @return           -> -none
* @description      -> all parameters in dec
*/
void RtcSetTime( uint8_t uiHour , uint8_t uiMinute , uint8_t uiSecond );

/* RtcSetDate
* @para             -> day, week_day, month, year
* @return           -> -none
* @description      -> all parameters in dec
*/
void RtcSetDate( uint8_t uiDay , uint8_t uiWeekDay , uint8_t uiMonth , uint16_t uiYear );

/* rtcSetAlrt
* @para             -> day, week_day, hour, minutes
* @return           -> -none
* @description      -> all parameters in dec
*/
void rtcSetAlrt( uint8_t uiDay , uint8_t uiWeekDay , uint8_t uiHour , uint8_t uiMinute );

/* RtcSetClkOut
* @para             -> frequency
* @return           -> -none
* @description      -> set the speed of clkout pin
*/
void RtcSetClkOut( uint8_t uiFreq );

/* RtcGetData
* @para             -> struct of rx8564_t
* @return           -> -none
* @description      -> save all read outs in the uiBuffer
*/
void RtcGetData( sRtc_t *psRtc );

/* RtcSetTimerCtrl1
* @para             -> config of timer mask
* @return           -> -none
* @description      -> for more details see datasheet
*/
void RtcSetTimerCtrl1( uint8_t uiMask );

/* RtcSetTimerCtrl2
* @para             -> config of rtc
* @return           -> -none
* @description      -> for more details see datasheet
*/
void RtcSetTimerCtrl2( uint8_t uiMask );

/* RtcReadTim
* @para             -> -none
* @return           -> register value
* @description      -> for more details see datasheet
*/
uint8_t RtcReadTim( void );


#endif