/* Generated by CodeDescriptor 1.0.0.0 */
/*
* Project Name      -> AT42QT2120
* Version           -> 1.0
* Author            -> Hm @ Workstadion.: QP-01-02
* Build Date        -> 16.05.2017 08:39:28
* Description       -> Defines, Prototypes & Variables
*
*
*
*/

#ifndef AT42QT2120_H 
#define AT42QT2120_H 

typedef struct at42qt
{
	uint8_t			ID;
	
	uint8_t			FirmwareVersion;
	
	uint8_t			DetectionStatus;
	
	uint16_t		KeySignal[12];
	uint16_t		KeyStatus;
	
	uint16_t		ReferenceData[12];
}at42qt_t;

at42qt_t qt2120;

enum gpio_state{
	
	BIT_RESET,
	BIT_SET	
};

enum keys_for_struct{
	
	KEY0,
	KEY1,
	KEY2,
	KEY3,
	KEY4,
	KEY5,
	KEY6,
	KEY7,
	KEY8,
	KEY9,
	KEY10,
	KEY11	
};

enum keys_for_status{
		
	STATUS_KEY0		= 1<<0,
	STATUS_KEY1		= 1<<1,
	STATUS_KEY2		= 1<<2,
	STATUS_KEY3		= 1<<3,
	STATUS_KEY4		= 1<<4,
	STATUS_KEY5		= 1<<5,
	STATUS_KEY6		= 1<<6,
	STATUS_KEY7		= 1<<7,
	STATUS_KEY8		= 1<<8,
	STATUS_KEY9		= 1<<9,
	STATUS_KEY10	= 1<<10,
	STATUS_KEY11	= 1<<11,
};

enum keys_for_signal{
	
	SIGNAL_KEY0		= 52,
	SIGNAL_KEY1		= 54,
	SIGNAL_KEY2		= 56,
	SIGNAL_KEY3		= 58,
	SIGNAL_KEY4		= 60,
	SIGNAL_KEY5		= 62,
	SIGNAL_KEY6		= 64,
	SIGNAL_KEY7		= 66,
	SIGNAL_KEY8		= 68,
	SIGNAL_KEY9		= 70,
	SIGNAL_KEY10	= 72,
	SIGNAL_KEY11	= 74,	
	};

enum at42qt2120_regs
{
	CHIP_ID					= 0,
	FIRMWARE_VERSION,
	DETECTION_STATUS,
	KEY_STATUS_BYTE_1,
	KEY_STATUS_BYTE_2,
	SLIDER_POSITION,
	CALIBRATE,
	RESET,
	LP,
	TTD,
	ATD,
	DI,
	TRD,
	DHT,
	SLIDER_OPTIONS,
	CHARGE_TIME				= 15,
	
	KEY_0_DETECT_THRESHOLD	= 16,
	KEY_1_DETECT_THRESHOLD,
	KEY_2_DETECT_THRESHOLD,
	KEY_3_DETECT_THRESHOLD,
	KEY_4_DETECT_THRESHOLD,
	KEY_5_DETECT_THRESHOLD,
	KEY_6_DETECT_THRESHOLD,
	KEY_7_DETECT_THRESHOLD,
	KEY_8_DETECT_THRESHOLD,
	KEY_9_DETECT_THRESHOLD,
	KEY_10_DETECT_THRESHOLD,
	KEY_11_DETECT_THRESHOLD	= 27,
	
	KEY_0_CONTROL			= 28,
	KEY_1_CONTROL,
	KEY_2_CONTROL,
	KEY_3_CONTROL,
	KEY_4_CONTROL,
	KEY_5_CONTROL,
	KEY_6_CONTROL,
	KEY_7_CONTROL,
	KEY_8_CONTROL,
	KEY_9_CONTROL,
	KEY_10_CONTROL,
	KEY_11_CONTROL			= 39,
	
	KEY_0_PULSE_SCALE		= 40,
	KEY_1_PULSE_SCALE,
	KEY_2_PULSE_SCALE,
	KEY_3_PULSE_SCALE,
	KEY_4_PULSE_SCALE,
	KEY_5_PULSE_SCALE,
	KEY_6_PULSE_SCALE,
	KEY_7_PULSE_SCALE,
	KEY_8_PULSE_SCALE,
	KEY_9_PULSE_SCALE,
	KEY_10_PULSE_SCALE,
	KEY_11_PULSE_SCALE		= 51,
	
	KEY_SIGNAL_0_BYTE_1		= 52,
	KEY_SIGNAL_0_BYTE_2,
	
	KEY_SIGNAL_1_BYTE_1,
	KEY_SIGNAL_1_BYTE_2,
	
	KEY_SIGNAL_2_BYTE_1,
	KEY_SIGNAL_2_BYTE_2,
	
	KEY_SIGNAL_3_BYTE_1,
	KEY_SIGNAL_3_BYTE_2,
	
	KEY_SIGNAL_4_BYTE_1,
	KEY_SIGNAL_4_BYTE_2,
	
	KEY_SIGNAL_5_BYTE_1,
	KEY_SIGNAL_5_BYTE_2,
	
	KEY_SIGNAL_6_BYTE_1,
	KEY_SIGNAL_6_BYTE_2,
	
	KEY_SIGNAL_7_BYTE_1,
	KEY_SIGNAL_7_BYTE_2,
	
	KEY_SIGNAL_8_BYTE_1,
	KEY_SIGNAL_8_BYTE_2,
	
	KEY_SIGNAL_9_BYTE_1,
	KEY_SIGNAL_9_BYTE_2,
	
	KEY_SIGNAL_10_BYTE_1,
	KEY_SIGNAL_10_BYTE_2,
	
	KEY_SIGNAL_11_BYTE_1,
	KEY_SIGNAL_11_BYTE_2		= 75,
	
	REFERENCE_DATA_0_BYTE_1		= 76,
	REFERENCE_DATA_0_BYTE_2,
	
	REFERENCE_DATA_1_BYTE_1,
	REFERENCE_DATA_1_BYTE_2,
	
	REFERENCE_DATA_2_BYTE_1,
	REFERENCE_DATA_2_BYTE_2,
	
	REFERENCE_DATA_3_BYTE_1,
	REFERENCE_DATA_3_BYTE_2,
	
	REFERENCE_DATA_4_BYTE_1,
	REFERENCE_DATA_4_BYTE_2,
	
	REFERENCE_DATA_5_BYTE_1,
	REFERENCE_DATA_5_BYTE_2,
	
	REFERENCE_DATA_6_BYTE_1,
	REFERENCE_DATA_6_BYTE_2,
	
	REFERENCE_DATA_7_BYTE_1,
	REFERENCE_DATA_7_BYTE_2,
	
	REFERENCE_DATA_8_BYTE_1,
	REFERENCE_DATA_8_BYTE_2,
	
	REFERENCE_DATA_9_BYTE_1,
	REFERENCE_DATA_9_BYTE_2,
	
	REFERENCE_DATA_10_BYTE_1,
	REFERENCE_DATA_10_BYTE_2,
	
	REFERENCE_DATA_11_BYTE_1,
	REFERENCE_DATA_11_BYTE_2	= 99,
};

enum at42qt2120_pwrMde
{
	POWER_DOWN,
	MS_16,
	MS32,
	MS48,
	MS64,
	SEC4_064 = 254,
	SEC4_08,
};



/* Read Chip ID
* @para             -> TWI_t = Sturct of TWI, at42qt_t = Struct
* @return           -> ID write into x.ID = return 0 = all O.k
* @description      -> -none
*/
void qt2120_get_info(TWI_t *twi, at42qt_t *at42qtxx);

/* Calibrate Chip
* @para             -> TWI_t = Sturct of TWI
* @return           -> -none
* @description      -> -none
*/
void qt2120_cmd_cal(TWI_t *twi, at42qt_t *at42qtxx);

/* Read Key Signals
* @para             -> TWI_t = Sturct of TWI, at42qt_t = Struct
* @return           -> Number of Bytes is was readed
* @description      -> Result after read @ x.Key[x]
*/
void qt2120_get_rks(TWI_t *twi, at42qt_t *at42qtxx, enum keys_for_signal keyx);

/* Read Key Signals
* @para             -> TWI_t = Sturct of TWI, at42qt_t = Struct
* @return           -> Number of Bytes is was readed
* @description      -> Result after read @ x.ReferenceData[x]
*/
void qt2120_get_rfd(TWI_t *twi, at42qt_t *at42qtxx);

/* Set GPIO
* @para             -> TWI_t = Sturct of TWI, at42qt_t = Struct, key = Number of Key, state = 1/High .. 0/Low
* @return           -> -none
* @description      -> -none
*/
void qt2120_set_gpio(TWI_t *twi, at42qt_t *at42qtxx, uint8_t key, enum gpio_state state);

/* Get State of Device
* @para             -> TWI_t = Sturct of TWI, at42qt_t = Struct
* @return           -> -none
* @description      -> State of Device.. Result -> Struct.DetectionStatus
*/
void qt2120_get_state(TWI_t *twi, at42qt_t *at42qtxx);

/* Get State of Keys
* @para             -> TWI_t = Sturct of TWI, at42qt_t = Struct
* @return           -> -none
* @description      -> Read Key Status.. Result -> Struct.KeyStatus
*/
void qt2120_get_ks(TWI_t *twi, at42qt_t *at42qtxx);

/* Set Detect Threshold
* @para             -> TWI_t = Sturct of TWI, keys_for_struct = KEYx, dthr = 0..255
* @return           -> -none
* @description      -> Read Key Status.. Result -> Struct.KeyStatus
*/
void qt2120_set_dthr(TWI_t *twi, enum keys_for_struct keyx, uint8_t dthr);

#endif 