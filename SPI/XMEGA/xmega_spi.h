/* Generated by CodeDescriptor 1.0.0.0 */
/*
* Project Name      -> XMEGA - SPI Driver
* Version           -> 1.0
* Author            -> Hm @ Workstadion.: QP-01-02
* Build Date        -> 16.06.2017 08:35:29
* Description       -> Driver for XMEGA(s)
*
*
*
*/

#ifndef __XMEGA_SPI_H__
#define __XMEGA_SPI_H__

#include "../Headers/wsq3000_def.h"
#include <avr/io.h>


typedef struct
{
	SPI_t		*spiUnit;
	USART_t		*usartUnit;
	
	struct
	{
		PORT_t  *spi;
	}ports;
	
	struct  
	{
		uint8_t miso;
		uint8_t mosi;
		uint8_t sck;		
	}bitPos;

}spiIO_t;

/* SPI Struktur
*  Muss vor benutzung der "SPI" Funktionen einmalig initalisiert werden
*/
extern spiIO_t *spiIO;

/* USART - SPI Struktur
*	Muss vor benutzung der "USART - SPI" Funktionen einmalig initalisiert werden
*/
extern spiIO_t *spiUsart;


/*	Hardware SPI / USART_SPI Konfigurationen
*	Ab hier bitte nichts mehr ändern!
*/
#define SPI_USART_CALC_BSEL( BAUD )					(uint16_t) ( ( F_CPU / ( 2 * BAUD ) ) - 1 ) 


#define SPI_USARTX_WAIT_DATA_REGISTER_IS_EMPTY()	while( ! ( spiUsart->usartUnit->STATUS & USART_DREIF_bm ) ){}
#define SPI_USARTX_WAIT_RECEIVE_INTERRUPT() 		while( ! ( spiUsart->usartUnit->STATUS & USART_RXCIF_bm ) ){}

#define SPI_WHILE_TX_COMPLETE()						while( ! ( spiIO->spiUnit->STATUS & SPI_IF_bm ) ){} // wait transmit is complete


#if defined (__AVR_ATxmega256A3BU__)
	
	#define USARTx_MSPI								( 0x02 << 6 )
	#define USARTx_TXCIF_bp							6
	#define USARTx_RXCIF_bp							7
	#define USARTx_RXEN_bp							4
	#define USARTx_TXEN_bp							3
	#define USARTx_UCPHA_bp							1
	#define USARTx_UDORD_bp							2

	#define SPI_PRESCALER_DIV2_gc					( 0x00 << 0 )
	#define SPI_PRESCALER_DIV8_gc					( 0x01 << 0 )
	#define SPI_PRESCALER_DIV32_gc					( 0x02 << 0 )
	
#endif


typedef enum
{
	USART_SPI_LSB_FIRST,
	USART_SPI_MSB_FIRST,
	
}usartxSpiDataOrder_enum;

typedef enum
{
	USART_SPI_MODE0,
	USART_SPI_MODE1,
	USART_SPI_MODE2,
	USART_SPI_MODE3,
	
}usartxSpiMode_enum;

typedef enum
{
	SPI_MODE_0,
	SPI_MODE_1,
	SPI_MODE_2,
	SPI_MODE_3
	
}spiMode_enum;

typedef enum
{
	SPI_PRESCALER_4,
	SPI_PRESCALER_16,
	SPI_PRESCALER_64,
	SPI_PRESCALER_128,
	
	SPI_PRESCALER_DBL_SPEED_2,
	SPI_PRESCALER_DBL_SPEED_8,
	SPI_PRESCALER_DBL_SPEED_32
	
}spiPrescaler_enum;

typedef enum
{
	SPI_MSB_FIRST,
	SPI_LSB_FIRST
	
}spiDataOrder_enum;

typedef enum
{
	SPI_INT_LVL_LOW,
	SPI_INT_LVL_MEDIUM,
	SPI_INT_LVL_HIGH
	
}spiInterruptLvl_enum;


void	spiUsartxInit		( spiIO_t *usartx , uint32_t baud , usartxSpiMode_enum mode , usartxSpiDataOrder_enum dataOrder );
void	spiUsartxWrite		( uint8_t byte );
uint8_t spiUsartxRead		( void );
uint8_t spiUsartxWriteRead	( uint8_t byte );

void	spiMasterInit		( spiIO_t *s , spiPrescaler_enum pres ,  uint8_t doubleSpeed , spiMode_enum mode , spiDataOrder_enum order , spiInterruptLvl_enum intlvl );
void	spiMasterWrite		( uint8_t byte );
uint8_t spiMasterRead		( void );
uint8_t spiMasterWriteRead	( uint8_t byte );



void spiSlaveSelect			(void);
void spiSlaveDeselect		(void);


#endif