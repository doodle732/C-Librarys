/* Generated by CodeDescriptor 1.5.0.0907 */
/*
* Project Name      -> Software SPI
* Version           -> 1.0.0.0316
* Author            -> Hm @ Workstadion.: QP-01-02
* Build Date        -> 16.03.2018 13:26:03
* Description       -> Software SPI
*
*
*
*	CPOL (Clock Polarity)
*	0: Takt ist in Ruhe LOW, ein Wechsel auf HIGH zählt als steigende Taktflanke
*	1: Takt ist invertiert: in Ruhe HIGH, ein Wechsel auf LOW zählt als steigende Taktflanke
*	
*	CPHA (Clock Phase)
*	0: Daten werden bei steigender Taktflanke (=abh. von CPOL) eingelesen, bei fallender ausgegeben
*	1: Daten werden bei fallender Taktflanke eingelesen, bei steigender ausgegeben
*
*
*/
/*
*	Bitte "SPI Modus" wählen
*
*	Mode	CPOL	CPHA
*	0		0		0
*	1		0		1
*	2		1		0
*	3		1		1
*
*/
#define SPI_MODE 1



#include <avr/io.h>
#include "hard_def.h"

#ifndef __SOFT_SPI_H__
#define __SOFT_SPI_H__


#define PORT(DDRx)	( * ( ( &DDRx ) + 1 ) )
#define PIN(DDRx)	( * ( ( &DDRx ) - 1 ) )

#define SPI_SOFT_MISO_DDR	DDRB
#define SPI_SOFT_MOSI_DDR	DDRB
#define SPI_SOFT_SCK_DDR	DDRB
#define SPI_SOFT_SCS_DDR	I2C_DDR

#define SPI_SOFT_MISO_PIN	PINB

#define SPI_SOFT_MISO_BP	6
#define SPI_SOFT_MOSI_BP	5
#define SPI_SOFT_SCK_BP		7
#define SPI_SOFT_SCS_BP		I2C_SDA_bp

/*
*	Hier nichts ändern!
*/
#undef CPOL
#undef CPHA

#if   ( SPI_MODE == 0 )
#define CPOL	0
#define CPHA	0

#elif ( SPI_MODE == 1 )
#define CPOL	0
#define CPHA	1

#elif ( SPI_MODE == 2 )
#define CPOL	1
#define CPHA	0

#elif ( SPI_MODE == 3 )
#define CPOL	1
#define CPHA	1

#endif 

void spiSoftInit( void );

void spiSoftWrite( uint8_t byte );

void spiSoftSlaveSelect( void );

void spiSoftSlaveDeSelect( void );

uint8_t spiSoftRead( void );

#endif