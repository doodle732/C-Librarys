/* Generated by CodeDescriptor 1.5.0.0907 */
/*
* Project Name      -> MCP23S17
* Version           -> 1.0.0.0319
* Author            -> Hm @ Workstadion.: QP-01-02
* Build Date        -> 19.03.2018 13:50:03
* Description       -> Treiber für MCP23S17
*
*	Übertragungsprotokoll.:
*
*	Lesen ->		Byte[0] = Slave Adresse + lesen Bit
*					Byte[1]	= Adresse des zu lesenden Registers
*
*					Die gelesenen Daten werden in den Übergabepuffer zurück geschrieben
*					An erster Stelle (Byte[0]) findet man den Anfang der empfangenen Daten.
*					Der Puffer mit genügend Speicher muss selbst sichergestellt werden.
*
*					Für das lesen wird "mcp23s17ReadBytes ( uint8_t *buff , uint8_t leng )" benutzt!
*
*
*	Schreiben ->	Byte[0] = Slave Adresse + schreiben Bit
*					Byte[1] = Adresse des beschreibenden Registers
*					Byte[2..n] = Hier folgen die Daten die gesendet werden sollen
*
*					Für das schreiben wird "uint8_t mcp23s17WriteBytes( uint8_t *buff , uint8_t leng )" benutzt!
*
*					Die beiden Funktionen liefern jeweils die Anzahl der Übertragenen Daten zurück.
*					Die Anzahl der zu lesenden / schreibenden Bytes kann mit "sizeof(buffer)" übergeben werden.
*/

#include <avr/io.h>

#ifndef __MCP23S17_H__
#define __MCP23S17_H__



#define MCP23S17_ADDR			0


/*
*	Ab hier den Kode bitte nicht mehr ändern!
*/
#define	MCP23S17_OPCODE			( ( 1<<6 ) | ( 0x0E & ( MCP23S17_ADDR << 1 ) ) )


#define SPI_WRITE				0
#define SPI_READ				1

#define MCP23S17_SS_PORT		PORTC
#define MCP23S17_SS_bp			3

enum mcp23s17_bank_0
{
	BANK0_IODIRA,
	BANK0_IODIRB,
	BANK0_IPOLA,
	BANK0_IPOLB,
	BANK0_GPINTENA,
	BANK0_GPINTENB,
	BANK0_DEFVALA,
	BANK0_DEFVALB,
	BANK0_INTCONA,
	BANK0_INTCONB,
	BANK0_IOCON0A,
	BANK0_IOCON0B,
	BANK0_GPPUA,
	BANK0_GPPUB,
	BANK0_INTFA,
	BANK0_INTFB,
	BANK0_INTCAPA,
	BANK0_INTCAPB,
	BANK0_GPIOA,
	BANK0_GPIOB,
	BANK0_OLATA,
	BANK0_OLATB,
}mcp23s17_bank_0_enum;

enum mcp23s17_bank_1
{
	BANK1_IODIRA		= 0x00,
	BANK1_IODIRB		= 0x10,
	BANK1_IPOLA			= 0x01,
	BANK1_IPOLB			= 0x11,
	BANK1_GPINTENA		= 0x02,
	BANK1_GPINTENB		= 0x12,
	BANK1_DEFVALA		= 0x03,
	BANK1_DEFVALB		= 0x13,
	BANK1_INTCONA		= 0x04,
	BANK1_INTCONB		= 0x14,
	BANK1_IOCON0A		= 0x05,
	BANK1_IOCON0B		= 0x15,
	BANK1_GPPUA			= 0x06,
	BANK1_GPPUB			= 0x16,
	BANK1_INTFA			= 0x07,
	BANK1_INTFB			= 0x17,
	BANK1_INTCAPA		= 0x08,
	BANK1_INTCAPB		= 0x18,
	BANK1_GPIOA			= 0x09,
	BANK1_GPIOB			= 0x19,
	BANK1_OLATA			= 0x0A,
	BANK1_OLATB			= 0x1A,
}mcp23s17_bank_1_enum;

enum mcp23s17_addr
{
	ENABLE_ADDR_PINS	= 1,
	DISABLE_ADDR_PINS	= !(ENABLE_ADDR_PINS)
};

enum mcp23s17_cnfg_bits
{
	RESERVE,
	INTPOL,	
	ODR,	
	HAEN,	
	DISSLW,	
	SEQOP,	
	MIRROR,	
	BANK,	
};


void mcp23s17Init( void );

uint8_t mcp23s17WriteBytes( uint8_t *buff , uint8_t leng );

uint8_t mcp23s17ReadBytes ( uint8_t *buff , uint8_t leng );

uint8_t mcp23s17CnfgOut( uint8_t gpioA ,  uint8_t gpioB );

uint8_t mcp23s17SetOut(	uint8_t gpioA , uint8_t gpioB );

uint8_t mcp23s17Cnfg( enum mcp23s17_cnfg_bits cnfgByte );

void mcp23s17Select( void );

void mcp23s17Deselect( void );

#endif
