
Teigausroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000232  000002c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000232  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800118  00800118  000002de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000951  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006de  00000000  00000000  00000cc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000275  00000000  00000000  0000139f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00001614  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000451  00000000  00000000  00001638  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001a89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e3       	ldi	r30, 0x32	; 50
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e1       	ldi	r26, 0x18	; 24
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 31       	cpi	r26, 0x1B	; 27
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 17 01 	jmp	0x22e	; 0x22e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
/*****************************************************************/

static inline void StepperInit( sStepper_t *sObj )
{
	/*!<-- Daten Richtungs Register konfiguieren <--*/
	*( sObj->sMsx.pPort - 1  ) |= sObj->sMsx.uiMsxGp; // Step Bits
  a6:	e0 e0       	ldi	r30, 0x00	; 0
  a8:	f1 e0       	ldi	r31, 0x01	; 1
  aa:	a6 81       	ldd	r26, Z+6	; 0x06
  ac:	b7 81       	ldd	r27, Z+7	; 0x07
  ae:	9e 91       	ld	r25, -X
  b0:	80 85       	ldd	r24, Z+8	; 0x08
  b2:	89 2b       	or	r24, r25
  b4:	8c 93       	st	X, r24
	*( sObj->sDir.pPort - 1  ) |= ( 1 << sObj->sDir.uiBp ); // Richtungs Ausgang
  b6:	a0 81       	ld	r26, Z
  b8:	b1 81       	ldd	r27, Z+1	; 0x01
  ba:	4e 91       	ld	r20, -X
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	9c 01       	movw	r18, r24
  c2:	02 80       	ldd	r0, Z+2	; 0x02
  c4:	02 c0       	rjmp	.+4      	; 0xca <main+0x24>
  c6:	22 0f       	add	r18, r18
  c8:	33 1f       	adc	r19, r19
  ca:	0a 94       	dec	r0
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <main+0x20>
  ce:	24 2b       	or	r18, r20
  d0:	2c 93       	st	X, r18
	*( sObj->sRst.pPort - 1  ) |= ( 1 << sObj->sRst.uiBp ); // Reset Ausgang
  d2:	a3 81       	ldd	r26, Z+3	; 0x03
  d4:	b4 81       	ldd	r27, Z+4	; 0x04
  d6:	4e 91       	ld	r20, -X
  d8:	9c 01       	movw	r18, r24
  da:	05 80       	ldd	r0, Z+5	; 0x05
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <main+0x3c>
  de:	22 0f       	add	r18, r18
  e0:	33 1f       	adc	r19, r19
  e2:	0a 94       	dec	r0
  e4:	e2 f7       	brpl	.-8      	; 0xde <main+0x38>
  e6:	24 2b       	or	r18, r20
  e8:	2c 93       	st	X, r18
	*( sObj->sStep.pPort - 1 ) |= ( 1 << sObj->sStep.uiBp ); // Pulse Ausgang
  ea:	a1 85       	ldd	r26, Z+9	; 0x09
  ec:	b2 85       	ldd	r27, Z+10	; 0x0a
  ee:	4e 91       	ld	r20, -X
  f0:	9c 01       	movw	r18, r24
  f2:	03 84       	ldd	r0, Z+11	; 0x0b
  f4:	02 c0       	rjmp	.+4      	; 0xfa <main+0x54>
  f6:	22 0f       	add	r18, r18
  f8:	33 1f       	adc	r19, r19
  fa:	0a 94       	dec	r0
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <main+0x50>
  fe:	24 2b       	or	r18, r20
 100:	2c 93       	st	X, r18
	*( sObj->sEn.pPort - 1   ) |= ( 1 << sObj->sEn.uiBp ); // Enable Ausgang
 102:	a4 85       	ldd	r26, Z+12	; 0x0c
 104:	b5 85       	ldd	r27, Z+13	; 0x0d
 106:	4e 91       	ld	r20, -X
 108:	9c 01       	movw	r18, r24
 10a:	06 84       	ldd	r0, Z+14	; 0x0e
 10c:	02 c0       	rjmp	.+4      	; 0x112 <main+0x6c>
 10e:	22 0f       	add	r18, r18
 110:	33 1f       	adc	r19, r19
 112:	0a 94       	dec	r0
 114:	e2 f7       	brpl	.-8      	; 0x10e <main+0x68>
 116:	24 2b       	or	r18, r20
 118:	2c 93       	st	X, r18
	*( sObj->sSlp.pPort - 1  ) |= ( 1 << sObj->sSlp.uiBp ); // Sleep Ausgang	
 11a:	a7 85       	ldd	r26, Z+15	; 0x0f
 11c:	b0 89       	ldd	r27, Z+16	; 0x10
 11e:	4e 91       	ld	r20, -X
 120:	9c 01       	movw	r18, r24
 122:	01 88       	ldd	r0, Z+17	; 0x11
 124:	02 c0       	rjmp	.+4      	; 0x12a <main+0x84>
 126:	22 0f       	add	r18, r18
 128:	33 1f       	adc	r19, r19
 12a:	0a 94       	dec	r0
 12c:	e2 f7       	brpl	.-8      	; 0x126 <main+0x80>
 12e:	24 2b       	or	r18, r20
 130:	2c 93       	st	X, r18
	
	/*!<-- Default Zustände setzen <--*/
	*( sObj->sDir.pPort  ) |=  ( 1 << sObj->sDir.uiBp ); // Richtungs Ausgang
 132:	a0 81       	ld	r26, Z
 134:	b1 81       	ldd	r27, Z+1	; 0x01
 136:	4c 91       	ld	r20, X
 138:	9c 01       	movw	r18, r24
 13a:	02 80       	ldd	r0, Z+2	; 0x02
 13c:	02 c0       	rjmp	.+4      	; 0x142 <main+0x9c>
 13e:	22 0f       	add	r18, r18
 140:	33 1f       	adc	r19, r19
 142:	0a 94       	dec	r0
 144:	e2 f7       	brpl	.-8      	; 0x13e <main+0x98>
 146:	24 2b       	or	r18, r20
 148:	2c 93       	st	X, r18
	*( sObj->sRst.pPort  ) |=  ( 1 << sObj->sRst.uiBp ); // Reset Ausgang
 14a:	a3 81       	ldd	r26, Z+3	; 0x03
 14c:	b4 81       	ldd	r27, Z+4	; 0x04
 14e:	4c 91       	ld	r20, X
 150:	9c 01       	movw	r18, r24
 152:	05 80       	ldd	r0, Z+5	; 0x05
 154:	02 c0       	rjmp	.+4      	; 0x15a <main+0xb4>
 156:	22 0f       	add	r18, r18
 158:	33 1f       	adc	r19, r19
 15a:	0a 94       	dec	r0
 15c:	e2 f7       	brpl	.-8      	; 0x156 <main+0xb0>
 15e:	24 2b       	or	r18, r20
 160:	2c 93       	st	X, r18
	*( sObj->sStep.pPort ) &= ~( 1 << sObj->sStep.uiBp ); // Pulse Ausgang
 162:	a1 85       	ldd	r26, Z+9	; 0x09
 164:	b2 85       	ldd	r27, Z+10	; 0x0a
 166:	2c 91       	ld	r18, X
 168:	ac 01       	movw	r20, r24
 16a:	03 84       	ldd	r0, Z+11	; 0x0b
 16c:	02 c0       	rjmp	.+4      	; 0x172 <main+0xcc>
 16e:	44 0f       	add	r20, r20
 170:	55 1f       	adc	r21, r21
 172:	0a 94       	dec	r0
 174:	e2 f7       	brpl	.-8      	; 0x16e <main+0xc8>
 176:	40 95       	com	r20
 178:	24 23       	and	r18, r20
 17a:	2c 93       	st	X, r18
	*( sObj->sEn.pPort   ) &= ~( 1 << sObj->sEn.uiBp ); // Enable Ausgang
 17c:	a4 85       	ldd	r26, Z+12	; 0x0c
 17e:	b5 85       	ldd	r27, Z+13	; 0x0d
 180:	2c 91       	ld	r18, X
 182:	ac 01       	movw	r20, r24
 184:	06 84       	ldd	r0, Z+14	; 0x0e
 186:	02 c0       	rjmp	.+4      	; 0x18c <main+0xe6>
 188:	44 0f       	add	r20, r20
 18a:	55 1f       	adc	r21, r21
 18c:	0a 94       	dec	r0
 18e:	e2 f7       	brpl	.-8      	; 0x188 <main+0xe2>
 190:	40 95       	com	r20
 192:	24 23       	and	r18, r20
 194:	2c 93       	st	X, r18
	*( sObj->sSlp.pPort  ) |=  ( 1 << sObj->sSlp.uiBp ); // Sleep Ausgang
 196:	a7 85       	ldd	r26, Z+15	; 0x0f
 198:	b0 89       	ldd	r27, Z+16	; 0x10
 19a:	4c 91       	ld	r20, X
 19c:	9c 01       	movw	r18, r24
 19e:	01 88       	ldd	r0, Z+17	; 0x11
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <main+0x100>
 1a2:	22 0f       	add	r18, r18
 1a4:	33 1f       	adc	r19, r19
 1a6:	0a 94       	dec	r0
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <main+0xfc>
 1aa:	24 2b       	or	r18, r20
 1ac:	2c 93       	st	X, r18

	/*!<-- Verschiedene Schrittweiten konfigurieren <--*/
	sObj->uiMode[STEP_FULL]			= 0x00;
 1ae:	12 8a       	std	Z+18, r1	; 0x12
	sObj->uiMode[STEP_HALF]			= 1 << STEPPER_MS1_BP;
 1b0:	22 e0       	ldi	r18, 0x02	; 2
 1b2:	23 8b       	std	Z+19, r18	; 0x13
	sObj->uiMode[STEP_QUARTER]		= 1 << STEPPER_MS2_BP;
 1b4:	24 e0       	ldi	r18, 0x04	; 4
 1b6:	24 8b       	std	Z+20, r18	; 0x14
	sObj->uiMode[STEP_EIGHTH]		= ( (1 << STEPPER_MS1_BP) | (1 << STEPPER_MS2_BP) );
 1b8:	26 e0       	ldi	r18, 0x06	; 6
 1ba:	25 8b       	std	Z+21, r18	; 0x15
	sObj->uiMode[STEP_SIXTEENTH]	= ( (1 << STEPPER_MS1_BP) | (1 << STEPPER_MS2_BP) | (1 << STEPPER_MS3_BP) );
 1bc:	2e e0       	ldi	r18, 0x0E	; 14
 1be:	26 8b       	std	Z+22, r18	; 0x16
	
	/*!<-- Nur für den internen gebrauch gedacht! <--*/
 	sStepperDrive.pPort = sObj->sStep.pPort;
 1c0:	21 85       	ldd	r18, Z+9	; 0x09
 1c2:	32 85       	ldd	r19, Z+10	; 0x0a
 1c4:	a8 e1       	ldi	r26, 0x18	; 24
 1c6:	b1 e0       	ldi	r27, 0x01	; 1
 1c8:	11 96       	adiw	r26, 0x01	; 1
 1ca:	3c 93       	st	X, r19
 1cc:	2e 93       	st	-X, r18
 	sStepperDrive.uiBp = sObj->sStep.uiBp;
 1ce:	23 85       	ldd	r18, Z+11	; 0x0b
 1d0:	12 96       	adiw	r26, 0x02	; 2
 1d2:	2c 93       	st	X, r18
	*( sObj->sDir.pPort ) ^= 1 << sObj->sDir.uiBp;	
};

static inline void StepperEnable( sStepper_t *sObj )
{
	*( sObj->sEn.pPort ) &= ~( 1 << sObj->sEn.uiBp );
 1d4:	a4 85       	ldd	r26, Z+12	; 0x0c
 1d6:	b5 85       	ldd	r27, Z+13	; 0x0d
 1d8:	2c 91       	ld	r18, X
 1da:	ac 01       	movw	r20, r24
 1dc:	06 84       	ldd	r0, Z+14	; 0x0e
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <main+0x13e>
 1e0:	44 0f       	add	r20, r20
 1e2:	55 1f       	adc	r21, r21
 1e4:	0a 94       	dec	r0
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <main+0x13a>
 1e8:	40 95       	com	r20
 1ea:	24 23       	and	r18, r20
 1ec:	2c 93       	st	X, r18
	*( sObj->sSlp.pPort ) &= ~( 1 << sObj->sSlp.uiBp );
}

static inline void StepperActivate( sStepper_t *sObj )
{
	*( sObj->sSlp.pPort ) |= ( 1 << sObj->sSlp.uiBp );
 1ee:	a7 85       	ldd	r26, Z+15	; 0x0f
 1f0:	b0 89       	ldd	r27, Z+16	; 0x10
 1f2:	2c 91       	ld	r18, X
 1f4:	01 88       	ldd	r0, Z+17	; 0x11
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <main+0x156>
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	0a 94       	dec	r0
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <main+0x152>
 200:	82 2b       	or	r24, r18
 202:	8c 93       	st	X, r24
}

static inline void StepperPulse( void )
{
 	*( sStepperDrive.pPort ) ^= ( 1 << sStepperDrive.uiBp );
 204:	a8 e1       	ldi	r26, 0x18	; 24
 206:	b1 e0       	ldi	r27, 0x01	; 1
 208:	41 e0       	ldi	r20, 0x01	; 1
 20a:	50 e0       	ldi	r21, 0x00	; 0
 20c:	12 96       	adiw	r26, 0x02	; 2
 20e:	8c 91       	ld	r24, X
 210:	12 97       	sbiw	r26, 0x02	; 2
 212:	ed 91       	ld	r30, X+
 214:	fc 91       	ld	r31, X
 216:	11 97       	sbiw	r26, 0x01	; 1
 218:	20 81       	ld	r18, Z
 21a:	ba 01       	movw	r22, r20
 21c:	02 c0       	rjmp	.+4      	; 0x222 <main+0x17c>
 21e:	66 0f       	add	r22, r22
 220:	77 1f       	adc	r23, r23
 222:	8a 95       	dec	r24
 224:	e2 f7       	brpl	.-8      	; 0x21e <main+0x178>
 226:	cb 01       	movw	r24, r22
 228:	82 27       	eor	r24, r18
 22a:	80 83       	st	Z, r24
 22c:	ef cf       	rjmp	.-34     	; 0x20c <main+0x166>

0000022e <_exit>:
 22e:	f8 94       	cli

00000230 <__stop_program>:
 230:	ff cf       	rjmp	.-2      	; 0x230 <__stop_program>
