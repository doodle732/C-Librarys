
Teigausroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000290  00000324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000290  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800118  00800118  0000033c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000036c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009d8  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000070c  00000000  00000000  00000da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000028d  00000000  00000000  000014b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00001740  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000046b  00000000  00000000  00001764  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000014  00000000  00000000  00001bcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00001be3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e9       	ldi	r30, 0x90	; 144
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e1       	ldi	r26, 0x18	; 24
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 31       	cpi	r26, 0x1B	; 27
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 46 01 	jmp	0x28c	; 0x28c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
 	sStepperDrive.uiBp = sObj->sStep.uiBp;
}

static inline void StepperReset( sStepper_t *sObj )
{
	*( sObj->sRst.pPort ) &= ~( 1 << sObj->sRst.uiBp );
  a6:	e0 e0       	ldi	r30, 0x00	; 0
  a8:	f1 e0       	ldi	r31, 0x01	; 1
  aa:	a3 81       	ldd	r26, Z+3	; 0x03
  ac:	b4 81       	ldd	r27, Z+4	; 0x04
  ae:	2c 91       	ld	r18, X
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	ac 01       	movw	r20, r24
  b6:	05 80       	ldd	r0, Z+5	; 0x05
  b8:	02 c0       	rjmp	.+4      	; 0xbe <main+0x18>
  ba:	44 0f       	add	r20, r20
  bc:	55 1f       	adc	r21, r21
  be:	0a 94       	dec	r0
  c0:	e2 f7       	brpl	.-8      	; 0xba <main+0x14>
  c2:	40 95       	com	r20
  c4:	24 23       	and	r18, r20
  c6:	2c 93       	st	X, r18
	for ( uint8_t x = 0 ; x < 10 ; x++){};
	*( sObj->sRst.pPort ) |= ( 1 << sObj->sRst.uiBp );	
  c8:	a3 81       	ldd	r26, Z+3	; 0x03
  ca:	b4 81       	ldd	r27, Z+4	; 0x04
  cc:	4c 91       	ld	r20, X
  ce:	9c 01       	movw	r18, r24
  d0:	05 80       	ldd	r0, Z+5	; 0x05
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <main+0x32>
  d4:	22 0f       	add	r18, r18
  d6:	33 1f       	adc	r19, r19
  d8:	0a 94       	dec	r0
  da:	e2 f7       	brpl	.-8      	; 0xd4 <main+0x2e>
  dc:	24 2b       	or	r18, r20
  de:	2c 93       	st	X, r18
/*****************************************************************/

static inline void StepperInit( sStepper_t *sObj )
{
	/*!<-- Daten Richtungs Register konfiguieren <--*/
	*( sObj->sMsx.pPort - 1  ) |= sObj->sMsx.uiMsxGp; // Step Bits
  e0:	a6 81       	ldd	r26, Z+6	; 0x06
  e2:	b7 81       	ldd	r27, Z+7	; 0x07
  e4:	3e 91       	ld	r19, -X
  e6:	20 85       	ldd	r18, Z+8	; 0x08
  e8:	23 2b       	or	r18, r19
  ea:	2c 93       	st	X, r18
	*( sObj->sDir.pPort - 1  ) |= ( 1 << sObj->sDir.uiBp ); // Richtungs Ausgang
  ec:	a0 81       	ld	r26, Z
  ee:	b1 81       	ldd	r27, Z+1	; 0x01
  f0:	4e 91       	ld	r20, -X
  f2:	9c 01       	movw	r18, r24
  f4:	02 80       	ldd	r0, Z+2	; 0x02
  f6:	02 c0       	rjmp	.+4      	; 0xfc <main+0x56>
  f8:	22 0f       	add	r18, r18
  fa:	33 1f       	adc	r19, r19
  fc:	0a 94       	dec	r0
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <main+0x52>
 100:	24 2b       	or	r18, r20
 102:	2c 93       	st	X, r18
	*( sObj->sRst.pPort - 1  ) |= ( 1 << sObj->sRst.uiBp ); // Reset Ausgang
 104:	a3 81       	ldd	r26, Z+3	; 0x03
 106:	b4 81       	ldd	r27, Z+4	; 0x04
 108:	4e 91       	ld	r20, -X
 10a:	9c 01       	movw	r18, r24
 10c:	05 80       	ldd	r0, Z+5	; 0x05
 10e:	02 c0       	rjmp	.+4      	; 0x114 <main+0x6e>
 110:	22 0f       	add	r18, r18
 112:	33 1f       	adc	r19, r19
 114:	0a 94       	dec	r0
 116:	e2 f7       	brpl	.-8      	; 0x110 <main+0x6a>
 118:	24 2b       	or	r18, r20
 11a:	2c 93       	st	X, r18
	*( sObj->sStep.pPort - 1 ) |= ( 1 << sObj->sStep.uiBp ); // Pulse Ausgang
 11c:	a1 85       	ldd	r26, Z+9	; 0x09
 11e:	b2 85       	ldd	r27, Z+10	; 0x0a
 120:	4e 91       	ld	r20, -X
 122:	9c 01       	movw	r18, r24
 124:	03 84       	ldd	r0, Z+11	; 0x0b
 126:	02 c0       	rjmp	.+4      	; 0x12c <main+0x86>
 128:	22 0f       	add	r18, r18
 12a:	33 1f       	adc	r19, r19
 12c:	0a 94       	dec	r0
 12e:	e2 f7       	brpl	.-8      	; 0x128 <main+0x82>
 130:	24 2b       	or	r18, r20
 132:	2c 93       	st	X, r18
	*( sObj->sEn.pPort - 1   ) |= ( 1 << sObj->sEn.uiBp ); // Enable Ausgang
 134:	a4 85       	ldd	r26, Z+12	; 0x0c
 136:	b5 85       	ldd	r27, Z+13	; 0x0d
 138:	4e 91       	ld	r20, -X
 13a:	9c 01       	movw	r18, r24
 13c:	06 84       	ldd	r0, Z+14	; 0x0e
 13e:	02 c0       	rjmp	.+4      	; 0x144 <main+0x9e>
 140:	22 0f       	add	r18, r18
 142:	33 1f       	adc	r19, r19
 144:	0a 94       	dec	r0
 146:	e2 f7       	brpl	.-8      	; 0x140 <main+0x9a>
 148:	24 2b       	or	r18, r20
 14a:	2c 93       	st	X, r18
	*( sObj->sSlp.pPort - 1  ) |= ( 1 << sObj->sSlp.uiBp ); // Sleep Ausgang	
 14c:	a7 85       	ldd	r26, Z+15	; 0x0f
 14e:	b0 89       	ldd	r27, Z+16	; 0x10
 150:	4e 91       	ld	r20, -X
 152:	9c 01       	movw	r18, r24
 154:	01 88       	ldd	r0, Z+17	; 0x11
 156:	02 c0       	rjmp	.+4      	; 0x15c <main+0xb6>
 158:	22 0f       	add	r18, r18
 15a:	33 1f       	adc	r19, r19
 15c:	0a 94       	dec	r0
 15e:	e2 f7       	brpl	.-8      	; 0x158 <main+0xb2>
 160:	24 2b       	or	r18, r20
 162:	2c 93       	st	X, r18
	
	/*!<-- Default Zustände setzen <--*/
	*( sObj->sDir.pPort  ) |=  ( 1 << sObj->sDir.uiBp ); // Richtungs Ausgang
 164:	a0 81       	ld	r26, Z
 166:	b1 81       	ldd	r27, Z+1	; 0x01
 168:	4c 91       	ld	r20, X
 16a:	9c 01       	movw	r18, r24
 16c:	02 80       	ldd	r0, Z+2	; 0x02
 16e:	02 c0       	rjmp	.+4      	; 0x174 <main+0xce>
 170:	22 0f       	add	r18, r18
 172:	33 1f       	adc	r19, r19
 174:	0a 94       	dec	r0
 176:	e2 f7       	brpl	.-8      	; 0x170 <main+0xca>
 178:	24 2b       	or	r18, r20
 17a:	2c 93       	st	X, r18
	*( sObj->sRst.pPort  ) |=  ( 1 << sObj->sRst.uiBp ); // Reset Ausgang
 17c:	a3 81       	ldd	r26, Z+3	; 0x03
 17e:	b4 81       	ldd	r27, Z+4	; 0x04
 180:	4c 91       	ld	r20, X
 182:	9c 01       	movw	r18, r24
 184:	05 80       	ldd	r0, Z+5	; 0x05
 186:	02 c0       	rjmp	.+4      	; 0x18c <main+0xe6>
 188:	22 0f       	add	r18, r18
 18a:	33 1f       	adc	r19, r19
 18c:	0a 94       	dec	r0
 18e:	e2 f7       	brpl	.-8      	; 0x188 <main+0xe2>
 190:	24 2b       	or	r18, r20
 192:	2c 93       	st	X, r18
	*( sObj->sStep.pPort ) &= ~( 1 << sObj->sStep.uiBp ); // Pulse Ausgang
 194:	a1 85       	ldd	r26, Z+9	; 0x09
 196:	b2 85       	ldd	r27, Z+10	; 0x0a
 198:	2c 91       	ld	r18, X
 19a:	ac 01       	movw	r20, r24
 19c:	03 84       	ldd	r0, Z+11	; 0x0b
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <main+0xfe>
 1a0:	44 0f       	add	r20, r20
 1a2:	55 1f       	adc	r21, r21
 1a4:	0a 94       	dec	r0
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <main+0xfa>
 1a8:	40 95       	com	r20
 1aa:	24 23       	and	r18, r20
 1ac:	2c 93       	st	X, r18
	*( sObj->sEn.pPort   ) &= ~( 1 << sObj->sEn.uiBp ); // Enable Ausgang
 1ae:	a4 85       	ldd	r26, Z+12	; 0x0c
 1b0:	b5 85       	ldd	r27, Z+13	; 0x0d
 1b2:	2c 91       	ld	r18, X
 1b4:	ac 01       	movw	r20, r24
 1b6:	06 84       	ldd	r0, Z+14	; 0x0e
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <main+0x118>
 1ba:	44 0f       	add	r20, r20
 1bc:	55 1f       	adc	r21, r21
 1be:	0a 94       	dec	r0
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <main+0x114>
 1c2:	40 95       	com	r20
 1c4:	24 23       	and	r18, r20
 1c6:	2c 93       	st	X, r18
	*( sObj->sSlp.pPort  ) |=  ( 1 << sObj->sSlp.uiBp ); // Sleep Ausgang
 1c8:	a7 85       	ldd	r26, Z+15	; 0x0f
 1ca:	b0 89       	ldd	r27, Z+16	; 0x10
 1cc:	2c 91       	ld	r18, X
 1ce:	01 88       	ldd	r0, Z+17	; 0x11
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <main+0x130>
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	0a 94       	dec	r0
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <main+0x12c>
 1da:	82 2b       	or	r24, r18
 1dc:	8c 93       	st	X, r24

	/*!<-- Schrittweiten konfigurieren <--*/
	sObj->uiMode[STEP_FULL]			= 0x00;
 1de:	12 8a       	std	Z+18, r1	; 0x12
	sObj->uiMode[STEP_HALF]			= 1 << STEPPER_MS1_BP;
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	83 8b       	std	Z+19, r24	; 0x13
	sObj->uiMode[STEP_QUARTER]		= 1 << STEPPER_MS2_BP;
 1e4:	84 e0       	ldi	r24, 0x04	; 4
 1e6:	84 8b       	std	Z+20, r24	; 0x14
	sObj->uiMode[STEP_EIGHTH]		= ( (1 << STEPPER_MS1_BP) | (1 << STEPPER_MS2_BP) );
 1e8:	86 e0       	ldi	r24, 0x06	; 6
 1ea:	85 8b       	std	Z+21, r24	; 0x15
	sObj->uiMode[STEP_SIXTEENTH]	= ( (1 << STEPPER_MS1_BP) | (1 << STEPPER_MS2_BP) | (1 << STEPPER_MS3_BP) );
 1ec:	8e e0       	ldi	r24, 0x0E	; 14
 1ee:	86 8b       	std	Z+22, r24	; 0x16
	
	/*!<-- Nur für den internen gebrauch gedacht! <--*/
 	sStepperDrive.pPort = sObj->sStep.pPort;
 1f0:	81 85       	ldd	r24, Z+9	; 0x09
 1f2:	92 85       	ldd	r25, Z+10	; 0x0a
 1f4:	a8 e1       	ldi	r26, 0x18	; 24
 1f6:	b1 e0       	ldi	r27, 0x01	; 1
 1f8:	11 96       	adiw	r26, 0x01	; 1
 1fa:	9c 93       	st	X, r25
 1fc:	8e 93       	st	-X, r24
 	sStepperDrive.uiBp = sObj->sStep.uiBp;
 1fe:	83 85       	ldd	r24, Z+11	; 0x0b
 200:	12 96       	adiw	r26, 0x02	; 2
 202:	8c 93       	st	X, r24
	if ( Step > STEP_SIXTEENTH )
	{
		return 1; // Modus nicht vorhanden
	}
	
	if ( !(sObj->sMsx.pPort) || !(sObj->sDir.pPort) || !(sObj->sRst.pPort) )
 204:	06 80       	ldd	r0, Z+6	; 0x06
 206:	f7 81       	ldd	r31, Z+7	; 0x07
 208:	e0 2d       	mov	r30, r0
 20a:	30 97       	sbiw	r30, 0x00	; 0
 20c:	71 f0       	breq	.+28     	; 0x22a <main+0x184>
 20e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 212:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 216:	89 2b       	or	r24, r25
 218:	41 f0       	breq	.+16     	; 0x22a <main+0x184>
 21a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__data_start+0x3>
 21e:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__data_start+0x4>
 222:	89 2b       	or	r24, r25
 224:	11 f0       	breq	.+4      	; 0x22a <main+0x184>
	{
		return 2; // kein gültiger Port
	}
	
	*( sObj->sMsx.pPort ) = ( *sObj->sMsx.pPort & 0xFF ) ^ sObj->uiMode[Step];
 226:	80 81       	ld	r24, Z
 228:	80 83       	st	Z, r24
	*( sObj->sDir.pPort ) ^= ( 1 << sObj->sDir.uiBp );	
};

static inline void StepperEnable( sStepper_t *sObj )
{
	*( sObj->sEn.pPort ) &= ~( 1 << sObj->sEn.uiBp );
 22a:	e0 e0       	ldi	r30, 0x00	; 0
 22c:	f1 e0       	ldi	r31, 0x01	; 1
 22e:	a4 85       	ldd	r26, Z+12	; 0x0c
 230:	b5 85       	ldd	r27, Z+13	; 0x0d
 232:	2c 91       	ld	r18, X
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	ac 01       	movw	r20, r24
 23a:	06 84       	ldd	r0, Z+14	; 0x0e
 23c:	02 c0       	rjmp	.+4      	; 0x242 <main+0x19c>
 23e:	44 0f       	add	r20, r20
 240:	55 1f       	adc	r21, r21
 242:	0a 94       	dec	r0
 244:	e2 f7       	brpl	.-8      	; 0x23e <main+0x198>
 246:	40 95       	com	r20
 248:	24 23       	and	r18, r20
 24a:	2c 93       	st	X, r18
	*( sObj->sSlp.pPort ) &= ~( 1 << sObj->sSlp.uiBp );
}

static inline void StepperActivate( sStepper_t *sObj )
{
	*( sObj->sSlp.pPort ) |= ( 1 << sObj->sSlp.uiBp );
 24c:	a7 85       	ldd	r26, Z+15	; 0x0f
 24e:	b0 89       	ldd	r27, Z+16	; 0x10
 250:	2c 91       	ld	r18, X
 252:	01 88       	ldd	r0, Z+17	; 0x11
 254:	02 c0       	rjmp	.+4      	; 0x25a <main+0x1b4>
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	0a 94       	dec	r0
 25c:	e2 f7       	brpl	.-8      	; 0x256 <main+0x1b0>
 25e:	82 2b       	or	r24, r18
 260:	8c 93       	st	X, r24
}

static inline void StepperPulse( void )
{
 	*( sStepperDrive.pPort ) ^= ( 1 << sStepperDrive.uiBp );
 262:	a8 e1       	ldi	r26, 0x18	; 24
 264:	b1 e0       	ldi	r27, 0x01	; 1
 266:	41 e0       	ldi	r20, 0x01	; 1
 268:	50 e0       	ldi	r21, 0x00	; 0
 26a:	12 96       	adiw	r26, 0x02	; 2
 26c:	8c 91       	ld	r24, X
 26e:	12 97       	sbiw	r26, 0x02	; 2
 270:	ed 91       	ld	r30, X+
 272:	fc 91       	ld	r31, X
 274:	11 97       	sbiw	r26, 0x01	; 1
 276:	20 81       	ld	r18, Z
 278:	ba 01       	movw	r22, r20
 27a:	02 c0       	rjmp	.+4      	; 0x280 <main+0x1da>
 27c:	66 0f       	add	r22, r22
 27e:	77 1f       	adc	r23, r23
 280:	8a 95       	dec	r24
 282:	e2 f7       	brpl	.-8      	; 0x27c <main+0x1d6>
 284:	cb 01       	movw	r24, r22
 286:	82 27       	eor	r24, r18
 288:	80 83       	st	Z, r24
 28a:	ef cf       	rjmp	.-34     	; 0x26a <main+0x1c4>

0000028c <_exit>:
 28c:	f8 94       	cli

0000028e <__stop_program>:
 28e:	ff cf       	rjmp	.-2      	; 0x28e <__stop_program>
