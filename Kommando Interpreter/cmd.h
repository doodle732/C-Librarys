/* Generated by CodeDescriptor 1.5.0.0907 */
/*
* Project Name      -> Kommando Interpreter
* Version           -> 1.0.1.1124
* Author            -> Hm @ Workstadion.: QP-01-02
* Build Date        -> 20.09.2017 07:50:01
* Description       ->
*
*
*	++ Telegramm Aufbau ++
*
*
*	'-' | '+ ' | | 0x05 | | 0x01 | | 0x04 | | 0x00 | | 0x32 | | 0..n ( max. 255 Bytes) |
*	+----------+ +------+ +------+ +------+ +------+ +------+ +------------------------+
*		 ^			^		 ^		   ^		^		 ^				  ^
*		 |			|		 |		   |		|		 |				  |
*	Startzeichen    |	  Datentyp	   |	Exitcode	 |			  Nutzdaten
*					|				   |				 |			  Anmerkung: Bei Datentypen > uint8_t
*			Länge des gesamten		   |			Checksumme		  wird das LSB zuerst gesendet.
*			Telegrammes				   |
*							Telegramm Identifikation
*
*
*	1.: Initalisierung der ganzen Struktur + Callback für die Sendefunktion
*
*/

#ifndef __CMD_H__
#define __CMD_H__

#include <stdint.h>
#include <stdlib.h>

#include "cmd_types.h"
#include "cmd_exit.h"
#include "cmd_id.h"

#ifndef _WIN32
    #include "uart.h"
#endif

#ifndef NULL
	#define NULL 0
#endif


/*
*	Callback Funktion zum senden von Frames..
*	2 Parameter müssen übergeben werden ->
*
*	1 = Zeiger auf Daten ( *uint8_t )
*	2 = Länge
*/
#ifndef _WIN32
    #define _CMD_SEND_CB_FNC_PTR_		uartPutByteStr
#endif


enum Cmd_Communication_Header_Enum
{
	CMD_HEADER_LENGTH_OF_FRAME, // Länge des gesamten Telegrammes
	CMD_HEADER_DATA_TYP, 		// (u)char , (u)int8 , (u)int16 , (u)int32
	CMD_HEADER_ID, 				// Telegramm Identifikation
	CMD_HEADER_EXITCODE,		// Exitkode aus Funktionen
	CMD_HEADER_CRC, 			// Checksumme von dem Telegramm

	__CMD_HEADER_ENTRYS__
};

typedef struct
{
	/*
	*	Welcher Datentyp wird gesendet?
	*	siehe "Cmd_Data_Type_Enum"
	*/
	enum Cmd_Data_Type_Enum	eDataType;

	/*
	*	Nachrichten Identifikation
	*	Die Identifikations Codes sind in
	*	"Cmd_Ident_Enum" einzutragen
	*/
	enum Cmd_Ident_Enum	eMessageID;

	/*
	*	Rückgabewerte aus letzten
	*	Funktionsaufrufen
	*/
	enum Cmd_Exitcodes_Enum	eExitcode;

	/*
	*	Zeiger auf Nutzdaten
	*/
	uint8_t *pData;

	/*
	*	Länge der zu sendenen Nutzdaten
	*/
	uint8_t uiDataLength;

}cmd_t;



/*	Hinweis
*	Das erste Element ist IMMER eine "Ping" Funktion.
*	Die einfach den String "ping" zurückliefert.
*	Dies sollte in jedem Projekt beachtet werden.
*/
typedef struct
{
	uint8_t (*fnc)( cmd_t *);
}cmdFuncTab_t;

typedef struct
{
    /**< Zeiger auf den Anfang des Frames */
	uint8_t *puiFrame;

	/**< Länge des kompletten Frames */
	uint8_t uiLength;

    /**< Gesendete Datentyp */
	enum Cmd_Data_Type_Enum	eDataType;

}Frame_t;

typedef struct
{
    /**< Intern berechnete Checksumme */
	uint8_t uiInternal;

    /**< Extern berechnete Checksumme */
	uint8_t uiExternal;

}Crc_t;


void		FrameInit			( cmd_t *psFrame );

void		FrameClear			( cmd_t *psFrame );

uint8_t		FrameParse			( uint8_t *pReceive , cmd_t *psFrame , uint16_t uiBufferLength );

void		FrameBuild  		( cmd_t *psFrame ,
								  enum Cmd_Ident_Enum eIdent ,
								  enum Cmd_Data_Type_Enum eDataType ,
								  enum Cmd_Exitcodes_Enum eExitcode ,
								  uint8_t *pData,
								  uint8_t DataLength
                                );

void		FrameSend   		( cmd_t *psFrame );



/**< DEBUG */

#ifdef _WIN32
    void        FrameShow      ( cmd_t *psFrame );
#endif

#endif
