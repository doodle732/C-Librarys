/* Generated by CodeDescriptor 1.5.0.0907 */
/*
* Project Name      -> Kommando Interpreter
* Version           -> 1.0.1.1124
* Author            -> Hm @ Workstadion.: QP-01-02
* Build Date        -> 20.09.2017 07:50:01
* Description       -> Description
*
*
*
*/

#ifndef __CMD_H__
#define __CMD_H__

#include <stdint.h>
#include <stdlib.h>



enum Communication_Header_Enum
{
	CMD_HEADER_START_BYTE1, // Kommando Start Byte 1
	CMD_HEADER_START_BYTE2, // .. Byte 2
	CMD_HEADER_LENGHT, 		// Länge des ganzen Streams
	CMD_HEADER_DATA_LENGHT, // Länge der Roh Daten
	CMD_HEADER_DATA_TYP, 	// (u)char , (u)int8 , (u)int16 , (u)int32
	CMD_HEADER_ID, 			// Stream ID
	CMD_HEADER_EXITCODE,	// Exitkode aus Funktionen
	CMD_HEADER_CRC, 		// Checksumme von der Message

	__CMD_HEADER_ENTRYS__
};

<<<<<<< .mine
enum data_typ_enum
||||||| .r170
	/*
	*	Funktion die beim entsprechenden Kommando
	*	ausgeführt werden soll
	*/
	void*		(*fnc) (void* , void*);

	/*
	*	Befehlssyntax
	*/
	const char	*syntax;

}cmdTable_t;

typedef struct
=======


typedef struct
>>>>>>> .r175
{
<<<<<<< .mine
	DATA_TYP_UINT8,
	DATA_TYP_UINT16,
	DATA_TYP_UINT32,
	DATA_TYP_FLOAT,	
	DATA_TYP_STRING,
	
	__DATA_TYP_MAX_INDEX__
};
||||||| .r170
	char 	*cmdPtr;
	uint8_t  paraNumb;
}cmdRaw_t;
cmdRaw_t raw;

enum crc_state
{
	CMD_CRC_OK,
	CMD_CRC_ERROR,	
};
=======
	uint8_t msgLen;
	uint8_t dataLen;
	uint8_t dataTyp;
	uint8_t id;
	uint8_t exitcode;	
	uint8_t inCrc;
	uint8_t outCrc;
	
	uint8_t *dataPtr;

}cmd_t;
>>>>>>> .r175

typedef struct 
{
<<<<<<< .mine
	uint8_t msgLen;
	uint8_t dataLen;
	uint8_t dataType;
	uint8_t id;
	uint8_t exitcode;	
	uint8_t inCrc;
	uint8_t outCrc;
	
	uint8_t *dataPtr;

}cmd_t;
||||||| .r170
	const 			cmdTable_t 	*table;
					size_t		tabLen;
					cmdRaw_t	*raw;
	uint8_t			crcState;
}cmd_t;
cmd_t cmd;
=======
	uint8_t (*fnc)( cmd_t *);	
}cmdFuncTab_t;
>>>>>>> .r175

typedef struct 
{
	uint8_t (*fnc)( cmd_t *);	
}cmdFuncTab_t;


<<<<<<< .mine
||||||| .r170
uint8_t 				cmdCntPara			( char *stream );
=======
void	cmdInit				( cmd_t *c );					
>>>>>>> .r175

<<<<<<< .mine
void	cmdInit				( cmd_t *c );					
||||||| .r170
const char				*cmdGetInstruction	( char *input );
=======
int8_t	cmdGetStartIndex	( uint8_t *rx );					
>>>>>>> .r175

<<<<<<< .mine
int8_t	cmdGetStartIndex	( uint8_t *rx );					
||||||| .r170
const char				*cmdGetName			( char *input );
=======
uint8_t	cmdGetEndIndex		( uint8_t *rx );					
>>>>>>> .r175

<<<<<<< .mine
uint8_t	cmdGetEndIndex		( uint8_t *rx );					
||||||| .r170
void					*cmdGetFunc			( char *input );
=======
uint8_t	cmdParse			( uint8_t *rx , cmd_t *c );		
>>>>>>> .r175

<<<<<<< .mine
uint8_t	cmdParse			( uint8_t *rx , cmd_t *c );		
||||||| .r170
char 					*cmdGetPara 		( char *out , char *in , uint8_t num );
=======
uint8_t	cmdCrc8StrCCITT		( uint8_t *str , uint8_t leng );
>>>>>>> .r175

<<<<<<< .mine
uint8_t	cmdCrc8StrCCITT		( uint8_t *str , uint8_t leng );
||||||| .r170
char 					*cmdGetCRC 			( char *out , char *stream );
=======
uint8_t	*cmdBuildHeader		( cmd_t *a );					
>>>>>>> .r175

<<<<<<< .mine
uint8_t	*cmdBuildHeader		( cmd_t *a );					
||||||| .r170
char					*cmdGetCmdStr		( char *out , char *stream );
=======
void	cmdSendAnswer		( cmd_t *a );					
>>>>>>> .r175

<<<<<<< .mine
void	cmdBuildAnswer		( cmd_t *a , uint8_t id , enum data_typ_enum dataType , uint8_t exitcode , uint8_t dataLen , uint8_t *dataPtr );
||||||| .r170
char					*cmdHelp			( char *helpBuff );
=======
>>>>>>> .r175

<<<<<<< .mine
void	cmdSendAnswer		( cmd_t *a );					
||||||| .r170
uint8_t 				cmdCrc8StrCCITT		( char *str );
=======
>>>>>>> .r175


#endif
