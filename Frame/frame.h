/* Generated by CodeDescriptor 1.5.0.0907 */
/*
* Project Name      -> Kommando Interpreter
* Version           -> 1.0.1.1124
* Author            -> Hm @ Workstadion.: QP-01-02
* Build Date        -> 20.09.2017 07:50:01
* Description       ->
*
*
*	++ Telegramm Aufbau ++
*
*
*	'-' | '+ ' | | 0x05 | | 0x01 | | 0x04 | | 0x00 | | 0x32 | | 0..n ( max. 255 Bytes) |
*	+----------+ +------+ +------+ +------+ +------+ +------+ +------------------------+
*		 ^			^		 ^		   ^		^		 ^				  ^
*		 |			|		 |		   |		|		 |				  |
*	Startzeichen    |	  Datentyp	   |	Exitcode	 |			  Nutzdaten
*					|				   |				 |			  Anmerkung: Bei Datentypen > uint8_t
*			Länge des gesamten		   |			Checksumme		  wird das LSB zuerst gesendet.
*			Telegrammes				   |
*			(ohne				Telegramm Identifikation
*            Startzeichen!)
*
*   Berechnen der Checksumme.:
*   [1] Fuer den Frame (ohne Nutzdaten) CRC8CCITT berechnen (dafür wird das Datenfeld für "FRAME_CRC" auf
*       0 gesetzt.
*
*   [2] Danach geht die berechnete CRC8CCITT in die Bildung vom CRC8CCITT der Rohdaten mit ein (sozusagen als "Startwert")
*
*   [3] Das Ergebniss wird dann in das Datenfeld "FRAME_CRC" kopiert.
*
*   [4] Fertig"
*
*
*	1.: Initalisierung der ganzen Struktur + Callback für die Sendefunktion
*
*
*
*
*
*/

#ifndef __FRAME_H__
#define __FRAME_H__

#include <stdint.h>
#include <stdlib.h>

#include "frame_types.h"
#include "exitcodes.h"
#include "frame_id.h"

#ifndef _WIN32
    #include "uart.h"
#endif

#ifndef NULL
	#define NULL 0
#endif


/*
*	Callback Funktion zum senden von Frames..
*	2 Parameter müssen übergeben werden ->
*
*	1 = Zeiger auf Daten ( *uint8_t )
*	2 = Länge
*/
#ifndef _WIN32
    #define _CMD_SEND_CB_FNC_PTR_		uartPutByteStr
#endif


enum eFrameDesc
{
	FRAME_LENGTH_OF_FRAME,  /**< Länge des gesamten Frames */
	FRAME_DATA_TYP, 		/**< Welcher Datentyp wird versendet */
	FRAME_ID, 				/**< Frame Identifikation */
	FRAME_EXITCODE,		    /**< Rückgabewert von Funktion */
	FRAME_CRC, 			    /**< Checksumme von der ganzen Nachricht */

	__FRAME_ENTRYS__
};

typedef struct
{
    /**< Datentyp der Nutzdaten im Frame */
	enum eDataType	eDataType;

    /**< Gibt an um welche Art Frame es sich handelt */
	enum eIdent	    eMessageID;

    /**< Funktions Rückgabe Code */
	enum eExitcodes	eExitcode;

    /**< Nutzdaten */
	uint8_t *pData;

    /**< Laenge der Nutzdaten */
	uint8_t uiDataLength;

}sFrameDesc_t;

typedef struct
{
    /**< Zeiger auf den Anfang des Frames */
	uint8_t *puiFrame;

	/**< Länge des kompletten Frames */
	uint8_t uiLength;

    /**< Gesendete Datentyp */
	enum eDataType	eDataType;

}sFrame_t;

typedef struct
{
    /**< Intern berechnete Checksumme */
	uint8_t uiInternal;

    /**< Extern berechnete Checksumme */
	uint8_t uiExternal;

}sCrc_t;


void		FrameInit			( sFrameDesc_t *psFrame );

void		FrameClear			( sFrameDesc_t *psFrame );

uint8_t		FrameParse			( uint8_t *pReceive , sFrameDesc_t *psFrame , uint16_t uiBufferLength );

void		FrameBuild  		( sFrameDesc_t *psFrame ,
								  enum eIdent eIdent ,
								  enum eDataType eDataType ,
								  enum eExitcodes eExitcode ,
								  uint8_t *pData,
								  uint8_t DataLength
                                );

void		FrameSend   		( sFrameDesc_t *psFrame );



/**< DEBUG */

#ifdef _WIN32
    void        FrameShow      ( sFrameDesc_t *psFrame );
#endif

#endif // __FRAME_H__
