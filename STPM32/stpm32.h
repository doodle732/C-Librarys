/* Generated by CodeDescriptor 1.5.0.0907 */
/*
* Project Name      -> STPM32
* Version           -> 1.0.0.0621
* Author            -> Hm @ Workstadion.: QP-01-02
* Build Date        -> 21.06.2018 07:49:56
* Description       -> Description
*
*
*
*/


#ifndef __STPM32_H__
#define __STPM32_H__

#define BUILD_UINT32( BUFF )	( ((uint32_t)BUFF[3]<<24UL | (uint32_t)BUFF[2]<<16UL | (uint32_t)BUFF[1]<<8UL | (uint32_t)BUFF[0]) )

#include <stdbool.h>
#include "xmega_spi.h"


/*	Hier bitte die "SPI Routinen" eintragen!
*	
*	**STPM32_SLAVE_SELECT**.: Eine Funktion ohne Rückgabeparameter und
*	ohne Übergabeparameter. Die Funktion muss lediglich den "Slave Select" Pin
*	vom "STPM32" auf "low" ziehen.
*
*	**STPM32_SLAVE_SELECT**.: Eine Funktion ohne Rückgabeparameter und
*	ohne Übergabeparameter. Die Funktion muss lediglich den "Slave Select" Pin
*	vom "STPM32" auf "high" ziehen.
*
*
*	**STPM32_TX_RX**.: Eine Funktion die ein "Byte( 8 Bit )" als Übergabeparameter
*	erwartet und als Rückgabeparameter das empfangene Byte wieder zurück gibt.
*
*/
#define STPM32_TX_RX			spiMasterWriteRead

#define STPM32_SYNC_PORT		PORTC
#define STPM32_SYNC_bp			0

#define STPM32_SS_PORT			PORTC
#define STPM32_SS_bp			1

#define STPM32_EN_PORT			PORTC
#define STPM32_EN_bp			2

enum stpm32CommunicationProtocol
{
	#define STPM32_FRAME_LENG			5
	#define STPM32_FRAME_WITHOUT_CRC	( STPM32_FRAME_LENG - 1 )
	
	STPM32_READ_ADDR,
	STPM32_WRITE_ADDR,
	STPM32_CMD_LSB,
	STPM32_CMD_MSB,
	STPM32_CRC,
	
	STPM32_COM_PROTOCOL
};

enum stpm32Regs
{
	DSP_CR1		= 0x00,
	DSP_CR2		= 0x02,
	DSP_CR3		= 0x04,
	DSP_CR4		= 0x06,
	DSP_CR5		= 0x08,
	DSP_CR6		= 0x0A,
	DSP_CR7		= 0x0C,
	DSP_CR8		= 0x0E,
	DSP_CR9		= 0x10,
	DSP_CR10	= 0x12,
	DSP_CR11	= 0x14,
	DSP_CR12	= 0x16,
	
	DFE_CR1		= 0x18,
	DFE_CR2		= 0x1A,
	
	DSP_IRQ1	= 0x1C,
	DSP_IRQ2	= 0x1E,
	
	DSP_SR1		= 0x20,
	DSP_SR2		= 0x22,
	
	US_REG1		= 0x24,
	US_REG2		= 0x26,
	US_REG3		= 0x28,
	
	DSP_EV1		= 0x2A,
	DSP_EV2		= 0x2C,
	
	DSP_REG1	= 0x2E,
	DSP_REG2	= 0x30,
	DSP_REG3	= 0x32,
	DSP_REG4	= 0x34,
	DSP_REG5	= 0x36,
	DSP_REG6	= 0x38,
	DSP_REG7	= 0x3A,
	DSP_REG8	= 0x3C,
	DSP_REG9	= 0x3E,
	DSP_REG10	= 0x40,
	DSP_REG11	= 0x42,
	DSP_REG12	= 0x44,
	DSP_REG13	= 0x46,
	DSP_REG14	= 0x48,
	DSP_REG15	= 0x4A,
	DSP_REG16	= 0x4C,
	DSP_REG17	= 0x4E,
	DSP_REG18	= 0x50,
	DSP_REG19	= 0x52,	
	
	PH1_REG1	= 0x54,
	PH1_REG2	= 0x56,
	PH1_REG3	= 0x58,
	PH1_REG4	= 0x5A,
	PH1_REG5	= 0x5C,
	PH1_REG6	= 0x5E,
	PH1_REG7	= 0x60,
	PH1_REG8	= 0x62,
	PH1_REG9	= 0x64,
	PH1_REG10	= 0x66,
	PH1_REG11	= 0x68,
	PH1_REG12	= 0x6A,
	
	PH2_REG1	= 0x6C,
	PH2_REG2	= 0x6E,
	PH2_REG3	= 0x70,
	PH2_REG4	= 0x72,
	PH2_REG5	= 0x74,
	PH2_REG6	= 0x76,
	PH2_REG7	= 0x78,
	PH2_REG8	= 0x7A,
	PH2_REG9	= 0x7C,
	PH2_REG10	= 0x7E,
	PH2_REG11	= 0x80,
	PH2_REG12	= 0x82,
	
	TOT_REG1	= 0x84,
	TOT_REG2	= 0x86,
	TOT_REG3	= 0x88,
	TOT_REG4	= 0x8A,
};

typedef struct
{
	/*
	*	DSP Control Register
	*/
	struct 
	{
		uint32_t reg[12];
	}dspControl;
	
	
	/* 
	*	DFE Control Register 
	*/
	struct
	{
		uint32_t reg[2];
	}dfeControl;
	
	/* 
	*	DSP IRQ Register
	*/
	struct  
	{
		uint32_t reg[2];
	}dspInterrupt;

	/* 
	*	DSP Status Register
	*/
	struct  
	{	
		uint32_t reg[2];
	}dspStatus;
	
	/*
	*	UART/SPI control register
	*/
	struct  
	{
		uint32_t reg[3];
	}uartSpiControl;
	
	/*
	*	DSP live event
	*/
	struct  
	{
		uint32_t reg[2];
	}dspLiveEvent;
	
	uint8_t lastTxCrc;
	uint8_t lastRxCrc;
	uint8_t crcErr;
	
	uint8_t DEBUG_[5];
	
	uint8_t (*spiTxRx )			( uint8_t byte );
	
}stpm32_t;
stpm32_t stpm32;


void stpm32SpiInit			( stpm32_t *s );

void stpm32CrcSetPoly		( uint8_t poly , uint8_t crcEn );

void stpm32CrcEnable		( bool crc );

void stpm32CrcDisable		( bool crc );

void stpm32Write			( uint8_t addr , uint16_t cmd , bool crc );

void stpm32Write_			( uint8_t addr , uint32_t cmd , bool crcEn );

int8_t stpm32Read			( uint8_t addr , uint8_t *buff , bool crc );

uint8_t stpm32Online		( void );

void stpm32Select			( void );

void stpm32Deselect			( void );

#endif
